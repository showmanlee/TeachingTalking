1. 동일 카드군 자동학습 - V
	- '자동차', '타다'를 '자동차를 타다'로 학습시켰을 경우, 탈것 카드군에 대한 모든 카드에 '(이름)를' 조합식을 추가.
	- 이 경우, (을/를) 구분 등의 조치가 필요 - 지금은 고려하지 않음
		- (사후 테스트를 통해 무마하거나 자동 학습된 것에 한해 가중치를 적게 줄 수도 있음)
	- 일단은 원본으로 학습했을 때만 동일 카드군 학습.
	
2. Resources 폴더를 AssetBundle로 변환 - V
	- 개발 중 카드 이미지 로드에 사용된 Resources 폴더는 성능/빌드 문제로 Unity측에서도 사용을 금지하는 방법이었음.
	- 이를 대체하기 위해 카드 리소스 저장 방식을 AssetBundle로 교체.
	  AssetBundle은 Unity에서 지원하는 외부 에셋 패키징 방식.
	  Resources 폴더와 달리 사전에 에디터에서 번들 영역을 지정한 뒤 별도의 코드를 실행해 AssetBundle을 만들어주어야 한다.
		- 이 경우에도 Resources 폴더에서 카드 이미지 검색할 때와 마찬가지로 파일 경로에서 이미지/카드군명 불러오기 가능
		- 그러나 확장자 없이도 폴더 안에 있는 파일 검색 불가, 파일을 불러올 때 확장자를 지정해야 함.
		- 따라서 확장자 탐지 코드가 추가로 필요하고, 이미지 로딩 방식도 변화 필요.
		- 카드군명과 카드 이미지들을 저장하는 클래스 CardGroup를 만들고,
		  GameManager 안에 이를 저장하는 리스트 cardImages를 만들어 AssetBundle을 통해 이를 채운다.
		- 카드 생성을 위한 카드군명/이미지 탐색은 이제 CardImages 안에 저장된 데이터를 통해 진행된다.
		  그리고 CardCheck의 카드 수 체크 역시 CardImages를 통해 진행되므로 더 이상 Resources 폴더는 사용되지 않는다.

3. 가중치 시스템의 개편 - V
	- 더 나은 학습 효과를 위해 초기 가중치, 자동학습 가중치, 테스트 가중치의 값을 바꿀 필요가 있음
	- 현재 가중치를 '획득'하는 곳: 직접 학습(1), 직접 학습으로 인한 자동학습(1), 테스트 피드백(좋아요(3), 어색해요(1))
	- 직접 학습은 말이 되는 것만 가르쳐주기 때문에 가중치를 높게 줘야 하지만, 자동학습은 말이 되지 않을 수도 있기 때문에 그보다는 적게 줘야 함.
	- 테스트 피드백은 학습으로 준 가중치를 굳히는 효과가 있고, 따라서 좋은 테스트 결과에 대한 가중치는 직접 학습보다도 충분히 줘야 함.
		- 다만 어색해요는 '정답은 아니지만 말은 된다' 정도만 알려주는 것이기 때문에 가중치를 크게 주지 않기
		- 자동학습의 경우 부정확한 결과가 들어갈 수 있기 때문에 피드백을 통한 자동학습 가중치 증감이 있어서는 안됨.
	- 따라서 가중치 체제를 이렇게 바꿔보자.
		- 직접 학습(2 + 1), 직접 학습으로 인한 자동학습(1), 테스트 피드백(좋아요(5), 어색해요(1))
	- 그와는 별개로 CardStatus.CombineAdd 함수에 추가 가중치 점수를 직접 입력하게 해 가중치 연속 추가에 반복문을 사용하지 않게 함.

4. C#에서 기계학습을 사용할 수 있는 방법 모색 및 적용 - ?
	- 기계학습/인공학습망은 Python만의 전유물은 아님. 방법만 알면 C#에서도 충분히 가능.
	- ML.NET, Accord.NET 등이 있고, 그 중 ML.NET은 MS에서 직접 지원하는 오픈소스 모듈.
	- https://docs.microsoft.com/ko-kr/dotnet/machine-learning/
	- ML.NET은 전용 학습기에 데이터를 주면 학습한 함수를 만들어주기도 함. 이를 활용해 붙을만한 조합식을 예측해서 줄 수도 있음.
		- 다만 이 경우 판별 기준(0 / 1)을 줘야 하는데, 이것은 가중치를 사용해 줄 수 있겠다.
	- "아니면 내가 직접 학습망을 짜볼 수도 있음" - 다른 사람들이 C#으로 구현한 인공신경망을 참조
	- 내가 기계학습 알고리즘(또는 인공신경망)으로 하고 싶은 게 뭐지?
		- "지도학습 알고리즘을 넣을 수 있는 곳"만을 따지지 말고, 정확히 내가 여기서 무엇을 개선할 수 있는지 알아보고, 그렇게 개선할 수 있는 방법으로 지도학습 알고리즘을 적용해보자는게 기본 목표.
		- 전통적 알고리즘을 대체하기 위해 필요하지만, 무조건 대체해서 좋은 건 아니다.

5. 조합식에서 형태소 검출 구상 - ?
	- 이는 '동일 카드군 자동학습', 그리고 '카드군'과 함께 연관지을 수 있다.
		- '과일' 카드들은 명사들로 구성되어 있고, '기본 동사' 카드는 동사들로 구성되어 있는데, 동사가 변경되는 모양에 따라 형태소 분리 가능.
		- 그리고 요런 과정을 기계학습과 함께 더 잘 풀어낼 수 있음.

6. 카드군 개편 - V
	- 새로운 카드군 추가.
	- 일단은 더 만들어보기 위해 넣은 것들
		- 시제(오늘, 내일, 어제, 아침, 점심, 밤) V
		- 시계(1시, 2시, 3시...) V
		- 계절(봄, 여름, 가을, 겨울) V	
		- ~를 '하다'(게임, 공부, 일, 운동, 스포츠) V
		- 감정(좋다, 나쁘다, 기쁘다, 신나다, 슬프다, 우울하다) V
		- ~를 '보다'(영화, 만화, 유튜브, 노을, 바닷가) V
	- S-V-O 문장 뿐만이 아닌, 다른 문장도 쓸 수 있도록 자연스럽게 유도하기.
	  (i.e. 서로 다른 카드나 구문을 이어붙여 접속사 유도)
	- 그러나 처음 만들 때도 그랬듯이, '어순 순서대로 카드를 놓아야 한다'는 것을 빼면 사용자가 강요받지 않고 자유롭게 학습할 수 있도록.

7. 편리한 학습을 위한 개선 사항 - V
	- 단어 학습 외의 상황에서 카드 선택 시 선택한 카드의 원래 이름이 잠깐 나오도록 설정 V
		- 카드 학습 과정에서 원래 이름을 더 쉽게 확인해 학습 과정을 편리하게 하도록
	- 학습 데이터는 두고 가중치만 초기화하는 버튼 추가 V
		- 가중치 산정이 잘못되어 수치를 새로 쌓고 싶을 때 유용